<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/webflow 
  http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

	<!-- var定义的变量是流程作用域内的 -->
	<var name="order" class="com.mvc.chapter8.flow.domain.Order" />

	<!-- 调用顾客子流程 -->
	<subflow-state id="identifyCustomer" subflow="pizza/customer">
		<!-- 子流程输出，name输出属性的名字，value输出属性的值：order实例的customer属性 -->
		<output name="customer" value="order.customer" />
		<!-- 如果子流程结束的状态id为customerReady，则本流程将会转移到名为buildOrder的状态里 -->
		<transition on="customerReady" to="buildOrder" />
	</subflow-state>

	<!-- 调用订单子流程 -->
	<subflow-state id="buildOrder" subflow="pizza/order">
		<!-- 子流程输入 -->
		<input name="order" value="order" />
		<!-- 如果子流程结束的状态id为orderCreated，则本流程将会转移到名为takePayment的状态里 -->
		<transition on="orderCreated" to="takePayment" />
	</subflow-state>

	<!-- 调用支付子流程 -->
	<subflow-state id="takePayment" subflow="pizza/payment">
		<input name="order" value="order" />
		<transition on="paymentTaken" to="saveOrder" />
	</subflow-state>

	<!-- 保存订单，行为状态：应用程序自身在执行任务 -->
	<action-state id="saveOrder">
		<!-- 行为状态要做的事情：找到id为pizzaFlowActions的bean，调用其saveOrder方法 -->
		<evaluate expression="orderController.saveOrder(order)" />
		<transition to="thankCustomer" />
	</action-state>

	<!-- 感谢顾客，视图状态：为用户展示信息 -->
	<view-state id="thankCustomer">
		<transition to="endState" />
	</view-state>

	<!-- 结束状态 -->
	<end-state id="endState" />

	<!-- 取消订单，全局转移 -->
	<global-transitions>
		<transition on="cancel" to="endState" />
	</global-transitions>
</flow>
